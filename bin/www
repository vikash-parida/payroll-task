const http = require('http');
const cluster = require('cluster');
const os = require('os');
const debug = require('debug');
const app = require('../app');
const db = require('../models');
const numCPUs = os.cpus().length;

// HELPER FUNCTIONS

// NORMALIZE A PORT INTO A NUMBER, STRING OR FALSE
function normalizePort(val) {
  const port = parseInt(val, 10);

  if (Number.isNaN(port)) {
    // named pipe
    return val;
  }
  if (port >= 0) {
    // port number
    return port;
  }
  return false;
}

// GET PORT FROM ENVIRONMENT AND STORE IN EXPRESS
const port = normalizePort(process.env.PORT || '8080');

// CREATE HTTP SERVER AND LISTEN ON THE PROVIDED PORT
const server = http.createServer(app);

// CLUSTERING -> IF ON MASTER THREAD, THEN START THE BACKGROUND WORKER
if (cluster.isMaster) {
  for (let i = 0; i < numCPUs; i++) {
    cluster.fork();
  }
  cluster.on('exit', (worker) => {
    cluster.fork();
  });
} else {

  server.listen(port, function () {
    console.log(`Listening on port: ${server.address().port}`);
    debug('Express server listening on port ' + server.address().port);
  });
  server.on('error', onError);
  server.on('listening', onListening);

  // if we are not on master thread then start the master thread
  // db.sequelize.sync({}).then(function () {
  //   server.listen(port, function () {
  //     console.log(`Listening on port: ${server.address().port}`);
  //     debug('Express server listening on port ' + server.address().port);
  //   });
  //   server.on('error', onError);
  //   server.on('listening', onListening);
  // });
}


//                database connected  
db.sequelize.authenticate().then(function () {
 console.log("database connection is successful");
});



// EVENT LISTENER FOR HTTP SERVER "listening" EVENT
function onListening() {
  let add = server.address();
  let bind = typeof add === 'string' ? 'pipe ' + add : 'port ' + add.port;
  debug('Listening on ' + bind);
}

// HANDLE SERVER ERROR
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string' ? `Pipe ${port}` : `Port ${port}`;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
    default:
      throw error;
  }
}